{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7j3WvUWeKSJC+pkfm6jAB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Hecho por Diego Alberto Canto Ricardez**"],"metadata":{"id":"5bEcuNvTO0B0"}},{"cell_type":"markdown","source":["# Problema 1\n","## Objetivo\n","\n","Desarrollar un proceso ETL (Extracción, Transformación y Carga) utilizando Python, que integre datos de dos archivos CSV diferentes, los transforme y los cargue en una base de datos (SQLite o Mysql).\n","\n","## Descripción\n","Deberán leer datos de dos archivos CSV: students.csv y grades.csv. Luego, deberán realizar varias transformaciones en los datos y, finalmente, cargar los datos transformados en una base de datos SQLite.\n","\n","Contenido\n","Columnas\n","students.csv: Contiene información sobre los estudiantes.\n","* student_id: ID del estudiante\n"," * name: Nombre del estudiante\n"," * age: Edad del estudiante\n"," * major: Carrera del estudiante\n","* grades.csv: Contiene información sobre las calificaciones de los estudiantes.\n"," * student_id: ID del estudiante\n"," * course: Nombre del curso\n"," * grade: Calificación obtenida\n","\n"],"metadata":{"id":"dCJIRWpddwcH"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"06zwzeuDOwnp","executionInfo":{"status":"ok","timestamp":1721456186765,"user_tz":360,"elapsed":4175,"user":{"displayName":"Diego Alberto Canto Ricardez","userId":"07177874303344903075"}},"outputId":"37f8ce66-566a-4047-bd4b-52389269e7f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Archivo Generado\n","Archivo Students_Diego.csv Generado\n","Archivo Grades_Diego.csv Generado\n"]}],"source":["# Primero los import\n","import pandas as pd\n","import numpy as np\n","import google.colab.drive as drive\n","\n","drive.mount(\"/content/drive\",force_remount=True)\n","\n","# Datos de estudiantes\n","Students_Data = {\n","    \"Student_ID\":[1,2,3,4,5],\n","    \"Name\":[\"Didac\",\"Pyt\",\"Victoria\",\"Arthur\",\"Tyr\"],\n","    \"Age\":[19,20,21,22,23],\n","    \"Major\":[\"Programming\",\"Mathematics\",\"Cooking\",\"Chemistry\",\"Physics\"]\n","}\n","DataSet_Students = pd.DataFrame(Students_Data)\n","\n","# Datos de Calificaciones\n","Grades_Data = {\n","    \"Student_ID\":[1,1,2,3,4,5,5],\n","    \"Course\":[\"Programming\",\"Programming\",\"Mathematics\",\"Cooking\",\"Chemistry\",\"Physics\",\"Physics\"],\n","    \"Grade\":[85,85,80,95,100,90,90]\n","}\n","DataSet_Grades = pd.DataFrame(Grades_Data)\n","\n","# Guardamos los DataFrames con formato CSV\n","DataSet_Students.to_csv('/content/drive/MyDrive/Colab Notebooks/Students_Diego.csv', index= False)\n","print(\"Archivo Generado\")\n","DataSet_Grades.to_csv('/content/drive/MyDrive/Colab Notebooks/Grades_Diego.csv', index= False)\n","print(\"Archivo Students_Diego.csv Generado\")\n","print(\"Archivo Grades_Diego.csv Generado\")"]},{"cell_type":"code","source":["# Primero los import\n","import pandas as pd\n","import numpy as np\n","import google.colab.drive as drive\n","\n","drive.mount(\"/content/drive\",force_remount=True)\n","\n","# Se carga el archivo\n","DataSet_Students = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Students_Diego.csv')\n","DataSet_Grades = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Grades_Diego.csv')\n","\n","# Cargamos los datos\n","print(\"Datos de Students_Diego.csv\")\n","print(DataSet_Students)\n","\n","print(\"Datos de Grades_Diego\")\n","print(DataSet_Grades)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"quT7et9-i6KH","executionInfo":{"status":"ok","timestamp":1721456193284,"user_tz":360,"elapsed":3534,"user":{"displayName":"Diego Alberto Canto Ricardez","userId":"07177874303344903075"}},"outputId":"49679ddf-1dad-42e3-abe5-344dde1a5437"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Datos de Students_Diego.csv\n","   Student_ID      Name  Age        Major\n","0           1     Didac   19  Programming\n","1           2       Pyt   20  Mathematics\n","2           3  Victoria   21      Cooking\n","3           4    Arthur   22    Chemistry\n","4           5       Tyr   23      Physics\n","Datos de Grades_Diego\n","   Student_ID       Course  Grade\n","0           1  Programming     85\n","1           1  Programming     85\n","2           2  Mathematics     80\n","3           3      Cooking     95\n","4           4    Chemistry    100\n","5           5      Physics     90\n","6           5      Physics     90\n"]}]},{"cell_type":"code","source":["# Primero los import\n","import pandas as pd\n","import sqlite3\n","from sqlalchemy import create_engine\n","import google.colab.drive as drive\n","\n","drive.mount(\"/content/drive\",force_remount=True)\n","\n","# Se carga el archivo\n","DataSet_Students = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Students_Diego.csv')\n","DataSet_Grades = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Grades_Diego.csv')\n","\n","# Convertimos primero todos los nombres en mayusculas\n","DataSet_Students['Name']= DataSet_Students['Name'].str.upper()\n","\n","# Filtramos que los estudiantes sean mayores de 18 años\n","DataSet_Students = DataSet_Students[DataSet_Students['Age'] > 18]\n","\n","# Unimos los datos de ambos dataframes basandonos en el ID\n","DataSet_Merged = pd.merge(DataSet_Students,DataSet_Grades, on='Student_ID')\n","\n","# Eliminamos los duplicados\n","DataSet_Final = DataSet_Merged[[\"Student_ID\",\"Name\",\"Age\",\"Major\",\"Average_Grades\"]].drop_duplicates()\n","\n","# Calculamos la calificacion promedio por estudiante y la añadimos con una nueva columna\n","Average_Grades = DataSet_Merged.groupby(\"Student_ID\")[\"Grade\"].mean().reset_index()\n","Average_Grades.columns = [\"Student_ID\",\"Average_Grade\"]\n","DataSet_Merged = pd.merge(DataSet_Merged,Average_Grades, on= \"Student_ID\")\n","\n","\n","# Creamos la conexion a la base de datos de SQLite\n","Engine = create_engine('sqlite://Students_Grades.db')\n","conn = sqlite3.connect('Students_Grades.db')\n","\n","# Datos de la tabla Students\n","Students_Table = DataSet_Final[[\"Student_ID\",\"Name\",\"Age\",\"Major\"]].drop_duplicates()\n","\n","# Datos de la tabla Students_Grades\n","Students_Grades_Table = DataSet_Merged[[\"Student_ID\",\"Course\",\"Grade\"]]\n","\n","#"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"Fl3Wuxrrkn3w","executionInfo":{"status":"error","timestamp":1721677846220,"user_tz":360,"elapsed":2970,"user":{"displayName":"Diego Alberto Canto Ricardez","userId":"07177874303344903075"}},"outputId":"eeea0cb2-54a8-4440-fe6b-8e68bde14c84"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"error","ename":"KeyError","evalue":"\"['Average_Grades'] not in index\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-384f881c6933>\u001b[0m in \u001b[0;36m<cell line: 23>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# Eliminamos los duplicados\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mDataSet_Final\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataSet_Merged\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Student_ID\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Name\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Age\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Major\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Average_Grades\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop_duplicates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;31m# Calculamos la calificacion promedio por estudiante y la añadimos con una nueva columna\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3765\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3766\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3767\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3768\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3769\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   5875\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5876\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5877\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5878\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5879\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   5939\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5940\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5941\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5942\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5943\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Average_Grades'] not in index\""]}]},{"cell_type":"code","source":[],"metadata":{"id":"c_fBJRbFvQvT"},"execution_count":null,"outputs":[]}]}